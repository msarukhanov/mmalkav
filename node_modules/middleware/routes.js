/**
 * Created by mark on 11/12/2015.
 */
module.exports = function (app, fs) {
    app.get('/', function (req, res) {
        fs.readFile('./data/map.html', function (err, html) {
            if (err) {
                throw err;
            }
            res.writeHeader(200, {"Content-Type": "text/html"});
            res.write(html);
            res.end();
        });
    });
    //=== load regions from collection ===
    //app.get('/getRegionsAll', function (req, res) {
    //    try {
    //        var query = regionsSchema.find({}).sort({pubDate: -1})
    //            .exec(function (err, docs) {
    //                if (!err) {
    //                    res.type('application/json');
    //                    res.jsonp(docs);
    //                }
    //                else {
    //                    console.log('error');
    //                }
    //            })
    //    }
    //    catch (err) {
    //        console.error(err);
    //    }
    //});
    //=== load regions from collection end ===

    //=== load one file with regions ===
    app.get('/getRegionsAll', function (req, res) {
        fs.readFile('./data/json/regions.json', 'utf8', function (err, data) {
            res.type('application/json');
            res.jsonp(JSON.parse(data));
        });
    });
    //=== one file loading end ===
    app.post('/getRegionsOne', function (req, res) {
        try {
            var query = regionsSchema.find({id: req.body.regionID})
                .exec(function (err, docs) {
                    if (!err) {
                        res.type('application/json');
                        res.jsonp(docs);
                    }
                    else {
                        console.log('error');
                    }
                })
        }
        catch (err) {
            console.error(err);
        }
    });
    app.post('/addRegionOne', function (req, res) {
        regionsSchema.collection.insert([req.body.newRegion], function (err, docs) {
            if (err) {
             console.log(err);
            } else {
                console.log('region_new successfully');
            }
        });
    });
    app.post('/editRegionsOne', function (req, res) {
        var changes = {};
        if(req.body.regionName) changes["properties.name"] = req.body.regionName;
        if(req.body.regionBorders) changes["geometry.coordinates"] = req.body.regionBorders;
        try {
            var query = regionsSchema.collection.update({id: req.body.regionID}, {
                $set: changes
            }, {}, function (err, docs) {
                if (err) {
                    console.log(err);
                } else {
                    console.log('region_edit_info successfully');
                    res.type('application/json');
                    res.jsonp({});
                }
            })
        }
        catch (err) {
            console.log(err);
        }
    });
    app.get('/getFactions', function (req, res) {
        fs.readFile('./data/json/factions.json', 'utf8', function (err, data) {
            res.type('application/json');
            res.jsonp(JSON.parse(data));
        });
    });

    //app.get('/getCampaignInfo', function (req, res) {
    //    try {
    //        var query = region_ownersSchema.find({}).sort({pubDate: -1})
    //            .exec(function (err, docs) {
    //                if (!err) {
    //                    res.type('application/json');
    //                    res.jsonp(docs);
    //                }
    //                else {
    //                    console.log('error');
    //                }
    //            })
    //    }
    //    catch (err) {
    //        console.log(err);
    //    }
    //});
    app.post('/setCampaignInfo', function (req, res) {
        try {
            var query = region_ownersSchema.collection.update({id: req.body.regionID}, {
                $set: {owner: req.body.new_owner}
            }, {}, function (err, docs) {
                if (err) {
                    console.log(err);
                } else {
                    console.log('region_edit_owner successfully');
                    res.type('application/json');
                    res.jsonp({});
                }
            });
        }
        catch (err) {
            console.log(err);
        }
    });
    app.get('/getCampaignInfo', function (req, res) {
        fs.readFile('./data/json/campaignInfo.json', 'utf8', function (err, data) {
            res.type('application/json');
            res.jsonp(JSON.parse(data));
        });
    });
    //app.post('/setCampaignInfo', function (req, res) {
    //    fs.readFile('./data/json/campaignInfo.json', 'utf8', function (err, data) {
    //        var map = data;
    //        map = JSON.parse(map);
    //        map[req.body.id] = req.body.country;
    //        map = JSON.stringify(map, null, '\t');
    //        fs.writeFile('./data/json/campaignInfo.json', map, function (err, data) {
    //            if (err) {
    //                console.log(err.message);
    //                return;
    //            }
    //            else res.jsonp(JSON.parse(map));
    //        });
    //    });
    //});
    app.post('/resetCampaignInfo', function (req, res) {
        fs.readFile('./data/default/campaignInfo.json', 'utf8', function (err, data) {
            var map = data;
            fs.writeFile('./data/json/campaignInfo.json', map, function (err, data) {
                if (err) {
                    console.log(err.message);
                    return;
                }
                else res.jsonp(JSON.parse(map));
            });
        });
    });
    app.post('/chat/signin',function (req, res) {
        try {
            var query = userSchema.find({login: req.body.login, password: req.body.password})
                .exec(function (err, docs) {
                    if (!err) {
                        if(docs.length > 0) {
                            res.type('application/json');
                            res.jsonp(docs[0]);
                        }
                        else {
                            res.send({
                                "error" : true,
                                "msg" : "login or password doesn't match"
                            });
                        }
                    }
                    else {
                        console.log('error');
                    }
                })
        }
        catch (err) {
            console.log(err);
        }
    })
};